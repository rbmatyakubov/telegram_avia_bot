import asyncio
import logging
import os
from io import BytesIO

import speech_recognition as sr
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, Voice, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pydub import AudioSegment

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ parser.py
from parser import extract_entities

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEB_APP_URL = os.environ.get("WEB_APP_URL")
# -----------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

dp = Dispatcher()
recognizer = sr.Recognizer()

@dp.message(CommandStart())
async def send_welcome(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úàÔ∏è –ù–∞–π—Ç–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã", web_app=WebAppInfo(url=WEB_APP_URL))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∏–ª–∏ —Å–∫–∞–∂–∏ –º–Ω–µ, –∫—É–¥–∞ –∏ –æ—Ç–∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª–µ—Ç–µ—Ç—å, –∏ —è –æ—Ç–∫—Ä–æ—é –¥–ª—è —Ç–µ–±—è —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞.",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

# =================================================================
# ‚Üì‚Üì‚Üì  –û–°–ù–û–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ù–ê–•–û–î–ò–¢–°–Ø –í –≠–¢–û–ô –§–£–ù–ö–¶–ò–ò  ‚Üì‚Üì‚Üì
# =================================================================
async def process_text_and_send_link(message: Message, text: str):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É (—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–ª–∏ –±–µ–∑) –∏ –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É.
    """
    await message.answer("–°–µ–∫—É–Ω–¥—É, –≥–æ—Ç–æ–≤–ª—é —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞... üßê")
    
    # 1. –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    entities = extract_entities(text)
    
    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    params = []
    if entities.get("origin_iata"):
        params.append(f'origin_iata={entities["origin_iata"]}')
    if entities.get("destination_iata"):
        params.append(f'destination_iata={entities["destination_iata"]}')
    if entities.get("date"):
        params.append(f'depart_date={entities["date"]}')
    
    query_string = "&".join(params)
    # –ï—Å–ª–∏ entities –ø—É—Å—Ç–æ–π, query_string —Ç–æ–∂–µ –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º, –∏ —Å—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –±–∞–∑–æ–≤–æ–π
    final_url = f"{WEB_APP_URL}?{query_string}"

    # 3. –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –ø–æ–Ω—è–ª–∏ –ª–∏ –º—ã –∑–∞–ø—Ä–æ—Å
    if entities.get("origin_iata") or entities.get("destination_iata"):
        # –ï—Å–ª–∏ —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ –≥–æ—Ä–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
        message_text = "–û—Ç–ª–∏—á–Ω–æ! –Ø –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å."
        button_text = "‚úÖ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É"
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
        message_text = "–Ø –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –≤—Ä—É—á–Ω—É—é. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫."
        button_text = "‚úàÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞"

    # 4. –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    builder = InlineKeyboardBuilder()
    builder.button(text=button_text, web_app=WebAppInfo(url=final_url))
    await message.answer(message_text, reply_markup=builder.as_markup())

# =================================================================
# ‚Üë‚Üë‚Üë  –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô  ‚Üë‚Üë‚Üë
# =================================================================


@dp.message(F.text)
async def handle_text_message(message: Message):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    await process_text_and_send_link(message, message.text)


@dp.message(F.voice)
async def handle_voice_message(message: Message, bot: Bot):
    await message.answer("–ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é... ü§´")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å
    try:
        voice_file_info = await bot.get_file(message.voice.file_id)
        voice_ogg = BytesIO()
        await bot.download_file(voice_file_info.file_path, voice_ogg)
        
        voice_ogg.seek(0)
        audio = AudioSegment.from_ogg(voice_ogg)
        voice_wav = BytesIO()
        audio.export(voice_wav, format="wav")
        voice_wav.seek(0)

        with sr.AudioFile(voice_wav) as source:
            audio_data = recognizer.record(source)
        
        recognized_text = recognizer.recognize_google(audio_data, language="ru-RU")
        await message.answer(f"<b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> ¬´{recognized_text}¬ª", parse_mode="HTML")
        # –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–æ—Å—å, –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
        await process_text_and_send_link(message, recognized_text)

    except (sr.UnknownValueError, sr.RequestError) as e:
        # –ï—Å–ª–∏ —Ä–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞—Å—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
        # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ø—É—Å—Ç–∞—è —Ñ–æ—Ä–º–∞
        await process_text_and_send_link(message, "")


async def main():
    if not BOT_TOKEN or not WEB_APP_URL:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ WEB_APP_URL!")
        return

    bot = Bot(token=BOT_TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped!")