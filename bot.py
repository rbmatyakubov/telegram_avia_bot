import asyncio
import logging
import os  # <-- –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from io import BytesIO

import speech_recognition as sr
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, Voice, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pydub import AudioSegment

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ parser.py
from parser import extract_entities

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –¢–µ–ø–µ—Ä—å –º—ã –±–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
# –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤.
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEB_APP_URL = os.environ.get("WEB_APP_URL")
# --- –ù–ò–ö–ê–ö–ò–• –ü–†–û–ö–°–ò ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

dp = Dispatcher()
recognizer = sr.Recognizer()

@dp.message(CommandStart())
async def send_welcome(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úàÔ∏è –ù–∞–π—Ç–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã", web_app=WebAppInfo(url=WEB_APP_URL))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: "
        "<b>¬´—Ö–æ—á—É –±–∏–ª–µ—Ç –∏–∑ –ú–æ—Å–∫–≤—ã –≤ –°–æ—á–∏ –Ω–∞ 25 –¥–µ–∫–∞–±—Ä—è¬ª</b>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –∑–∞–ø—Ä–æ—Å–æ–º!",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

async def process_text_and_send_link(message: Message, text: str):
    await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å... üßê")
    entities = extract_entities(text)
    if not entities.get("origin_iata") and not entities.get("destination_iata"):
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –≤ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    params = []
    if entities.get("origin_iata"):
        params.append(f'origin_iata={entities["origin_iata"]}')
    if entities.get("destination_iata"):
        params.append(f'destination_iata={entities["destination_iata"]}')
    if entities.get("date"):
        params.append(f'depart_date={entities["date"]}')
    query_string = "&".join(params)
    final_url = f"{WEB_APP_URL}?{query_string}"
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É", web_app=WebAppInfo(url=final_url))
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –Ø —Ä–∞–∑–æ–±—Ä–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
        reply_markup=builder.as_markup()
    )

@dp.message(F.text)
async def handle_text_message(message: Message):
    await process_text_and_send_link(message, message.text)

@dp.message(F.voice)
async def handle_voice_message(message: Message, bot: Bot):
    await message.answer("–ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é... ü§´")
    voice_file_info = await bot.get_file(message.voice.file_id)
    voice_ogg = BytesIO()
    await bot.download_file(voice_file_info.file_path, voice_ogg)
    voice_ogg.seek(0)
    audio = AudioSegment.from_ogg(voice_ogg)
    voice_wav = BytesIO()
    audio.export(voice_wav, format="wav")
    voice_wav.seek(0)
    with sr.AudioFile(voice_wav) as source:
        audio_data = recognizer.record(source)
    try:
        recognized_text = recognizer.recognize_google(audio_data, language="ru-RU")
        await message.answer(f"<b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b> ¬´{recognized_text}¬ª", parse_mode="HTML")
        await process_text_and_send_link(message, recognized_text)
    except sr.UnknownValueError:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except sr.RequestError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è; {e}")

async def main():
    if not BOT_TOKEN or not WEB_APP_URL:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ WEB_APP_URL!")
        return

    # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏ —Å–ª–æ–∂–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    bot = Bot(token=BOT_TOKEN)
    
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped!")